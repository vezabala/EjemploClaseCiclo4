1)Ingresar al repositorio
2)Crear carpeta para back y front
3) en consola escribir npm init
4) Cambiar punto de entrada por server.js
5) En author dejar nombre de la empresa

Necesitamos expres comunicador entre vack y front
doc ent entorno de trabajo
mong us mogo

comando npm i
1. npm i express dotenv mongoose

Para el back:
1. crear el app.js
2. crear server.js
En app.js cear variable que permita usar librerrias de js express
const express= require("express");
la constante app crea copia del objeto express
const app = express();

para java script toca exportar el app
module.exports=app

para server.js
1. importar en una constante la clase app
const app = require("./app");

luego crear una carpeta en el back llamada config
dentro de esta carpeta crear archivo config.env (viene siendo como el aplication properties en java)
en el archivo configurar el puerto
PORT=4000
NODE_ENV = DEVELOPMENT (ESTO PARA INDICAR  que esta en entorno de desarrollo)

Devuelta a server.js
1. Declarar el servidor const server=app.listen(process.env.PORT) asi se declara metodos en javaScript
(DE LA LINEA 3 A 

2. //sETEAR EL ARCHIVO DE CONFIGURACION

EJECUTAR LA APP:
ejecutar el server: node ruta (node back/server.js)
cerrar la ejecucion
instalar nodemon (npm i nodemon --save-dev)

-Modificar srpits en package.json
 "scripts": {
    "start": "node back/server.js",
    "dev": "SET NODE_ENV=DEVELOPMENT& nodemon back/server",
    "prod":"SET NODE_ENV=PRODUCTION& nodemon back/server"
  },

despues de esto para correrlo se usa npm run dev

CREAR CONTROLADORES
-Crear controladores dentro del back

exports.getProducts=(req,res,next) 
req= requisito
res = respuesta
next = paso siguiente

EN LA CARPETA RUTAS
Crear la ruta del controlador
const express=require("express")
const router= express.Router();

Volver a app.js
indicar el uso de jsons

PARA BASE DE DATOS:
Crear otra reminal y ir hasta la ruta C:\Program Files\MongoDB\Server\6.0\bin>
conectar desde compass
ejecutar mongod
en tora consola ejecutar comando brew services run mongodb-community

Conexion a la base de datos:
1. crear archivo en el pakete config: database.js
2. Crear en config.env variable DB_LOCAL_URI= mongodb://localhost:27017/coleccion(nombre de la base de datos)

volver al databasejs y crear  constante mongoose

Ir a la entidad productos.js
crear cariable constante mongoose
const mongoose = require("mongoose");
hacer plantilla json
trim:true, = elimina caracteres blancos
Para relaciones con otra entidad, se genera ya su id
Despues de crear el esquema exportar el modulo
module.exports= mongoose.model("productos",productosShema);

Volver al controlador de la entidad:
importar la entidad productos
crear metodo crear
para el metodo create responde con un 201

Crear la ruta en routes

en products controlers el get volverlo async
para la ruta de obtener por id el id se define :id

Para update tener en cueta const, let y var
const= nunca cambia, let= sujero a cambios, var= permisibo con todo

Se puede usar fetch para consultas acceso a recursos
para instlar fetch se hace con el comando npm install node-fetch
Para importarlo hacerlo de la siguiente manera:
const fetch = (url) => import('node-fetch').then(({default:fetch}) => fetch(url));



FRONTEND CON REACT
Para empezar dirigirse en la consola a la carpeta front
EJECUTAR: npx create-react-app .
luego npm config set legacy-peer-deps true
npm audit fix --force
npx create-react-app@5.0.1 .
npm i axios react-alert react-alert-template-basic react-bootstrap react-helmet react-redux redux redux-thunk redux-devtools-extension react-router-dom
npm start para iniciar el servidor del front inicia en el puerto 3000
para solucionar error importar: import React from 'react'; en app.js dentro de la carpeta src

LIMPIAR EL FRONT:
ir al public/index.html
eliminar todos los comentarios
crear favicon
cambiarlo en el index
ir al App.js y hacer modificaciones
luego al index.js y eliminar comentarios
crear carpeta en public que se llame images
Eliminar App.test.js, index.css, logo.svg, reportWeb, setupTests
Borrar todo lo de adentro de App.css
index.js borrar reportWebVitals(); , import reportWebVitals from './reportWebVitals'; y import './index.css';
Eliminar logo512

Crear una carpeta dentro de src llamada components y dentro crear folder layouts
Crear archivo js en layout (Header.js) Nota: descargar extencion snippets ES7
palabra de autocompletar racfe
crear todo lo del navbar

para llamarlo ir a App.js
y llamarlo entre la function
<Header />
Crear archivo Footer.js
palabra de autocompletar racfe
crear todo lo del footer

Llamarlo en el App.js


Crear en la carpeta componentes HOME.js
luego importarlo en el app.js
treaer react-router-dom en app.js esto para enrutar en el front

En Layout crear archivo MetaData.js y exportarlo
luego en el home importarlo

descargar extension de google redux devtools

sobre el src crear store.js
it luego al index.js y importarlo, tambien importar el proovedor para volver la aplicacion proveedor de servicios

luego dentro del src crear carpeta constants y dentro crear archivo productConstants.js para ver estados
Luego dentro del src crear carpeta reducer y dentro el archivo productReducer
Luego crear carpeta actions y dentro el archivo productActions.js

para conectar el back con el front es en el package.json del Front (ir ahi)
colocar en las ultimas lineas ,
  "proxy":"http://localhost:4000"
volver al store y convocar un productReducer
Ir al Home.js
import {useDispatch} from 'react-redux'
import { getProducts } from '../actions/productActions'
dentro de la constante crear otra constanbte que es la dispatch
en otra terminal ejecutar el back, y en otra la base de datos

para que empiece a salir productos consumidos de la base de datos
it a home.js y empezar a modificar
importar routerdom para tomar id para ver detalle

PARA CONTROL DE RRORES 
ir al controlador de productos y modificar get productos para error
luego ir al index.js: import { positions, transitions, Provider as AlertProvider } from 'react-alert';
import AlertTemplate from 'react-alert-template-basic';
volver al home y importal la alerta

PAARA VER DETALLE DE PRODUCTO:
Crear las constantes en product constants
Luego en products reducer importarlas anteriores constantes y hacer metodo products detil reducer
En store tarer productreducer y colocarlo en la constante reducer
Luego en accions imortar las constantes y crear el metodo para ver detalle del producto
Crear componente de product detail
crear la ruta en el app.js

MANEJO DE ERRORES
MIDEL WARE: INTERCOMUNIADOR
 
dentro del back crear carpeta utils
crear archivo dentro errorHandler.js
crear carpeta llamada middleware
crear archivo dentro llamada errors.js importar error habdler
crear luego dentro archivo catchAsyncErrors.js
Luego en el app.js crear la constante errorMiddleware
en products controller y modificar los metodos con el catchAsyncErros

AUTENTICACION:
Crear el modelo de usuarios como auth.js
Instalaciones:
npm i bcryptjs jsonwebtoken validator nodemailer cookie-parser body-parser
en el modelo crear el esquema del usuario
Luego crear controlador de authController.js
Luego hacer la ruta auth.js
importarlo en el app.js